[app]
# LLM used for internal operations, like deriving conversation names
fast_llm = "openai/llama-3.3-70b"

# LLM used for user-facing output, like RAG replies
quality_llm = "openai/llama-3.3-70b"

# LLM used for ingesting visual inputs
vlm = "openai/qwen-2.5-vl"

# LLM used for transcription
audio_lm = "openai/gpt-4o-mini-transcribe" # TODO - Replace with viable candidate


# Reasoning model, used for `research` agent
reasoning_llm = "openai/deepseek-r1-671b"
# Planning model, used for `research` agent
planning_llm = "openai/deepseek-r1-671b"

[embedding]
provider = "litellm"
base_model = "openai/text-embedding-3-large"
batch_size = 512
add_title_as_prefix = true
concurrent_request_limit = 4

[completion_embedding]
provider = "litellm"
base_model = "openai/text-embedding-3-large"
batch_size = 512
add_title_as_prefix = true
concurrent_request_limit = 4

[agent]
tools = ["search_file_knowledge"]

[completion]
provider = "litellm"
concurrent_request_limit = 4

  [completion.generation_config]
  temperature = 0.1
  top_p = 1
  max_tokens_to_sample = 1_024
  stream = false
  api_base = "https://litellm.deploy.qwellco.de/v1"

[ingestion]
provider = "unstructured_local"
strategy = "auto"
chunking_strategy = "by_title"
new_after_n_chars = 512
max_characters = 1_024
combine_under_n_chars = 128
overlap = 256
chunks_for_document_summary = 64
document_summary_model = "openai/llama-3.3-70b"
automatic_extraction = true

[orchestration]
provider = "hatchet"
